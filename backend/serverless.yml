service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  environment: 
    TODOS_TABLE: Todos-${self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

custom:
  documentations:
    api:
      info:
        version: v0.0.1
        title: Todo Api
        description: Serverless todo list
    models:
      - name: TodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}

functions:

  #Auth:
  #  handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          reqValidatiorName: RequestBodyValidator
          documentation:
            summary: Create a new todo
            description: Create a new todo
            requestModels:
              'application/json': TodoRequest

  # TODO: Configure this function
  #UpdateTodo:
  #  handler: src/lambda/http/updateTodo.handler
  #  events:
  #    - http:
  #        method: patch
  #        path: todos/{todoId}

  # TODO: Configure this function
  #DeleteTodo:
  #  handler: src/lambda/http/deleteTodo.handler
  #  events:
  #    - http:
  #        method: delete
  #        path: todos/{todoId}

  # TODO: Configure this function
  #GenerateUploadUrl:
  #  handler: src/lambda/http/generateUploadUrl.handler
  #  events:
  #    - http:
  #        method: post
  #        path: todos/{todoId}/attachment

resources:
  Resources:
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties: 
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false